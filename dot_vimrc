set splitbelow
set splitright

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Copy to clipboard with quotestar register
set clipboard=unnamed
filetype off

" open files in new tab
let g:netrw_browse_split = 3
" hide dot files. show using `gh`
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
"
" Turn on the Wild menu
set wildmenu

" When searching try to be smart about cases
set smartcase

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Fast saving
nmap <leader>w :w!<cr>

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" Add a bit extra margin to the left
set foldcolumn=1

" FZF
set rtp+=/usr/local/opt/fzf

" VIM-RUBY
" syntax enable
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Tabularize mappings
if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a| :Tabularize /|<CR>
  vmap <Leader>a| :Tabularize /|<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git etc. anyway...
set nobackup
set nowb
set noswapfile


" vim-rspec
map <Leader>r :call RunCurrentSpecFile()<CR>
map <Leader><S-r> :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "!spring rspec {spec}"

" Basic visual settings
set t_Co=256
" colorscheme Benokai
colorscheme morning
set colorcolumn=80
set number
set tabstop=2
set shiftwidth=2
set smartindent
set autoindent
set expandtab

set hlsearch " highlight all search patterns

" Bars
highlight clear SignColumn
highlight VertSplit    ctermbg=236
highlight ColorColumn  ctermbg=237
highlight LineNr       ctermbg=236 ctermfg=200
highlight StatusLineNC ctermbg=238 ctermfg=0
highlight StatusLine   ctermbg=240 ctermfg=232
highlight Visual       ctermbg=240   ctermfg=0
highlight Pmenu        ctermbg=240 ctermfg=12
highlight PmenuSel     ctermbg=3   ctermfg=1
highlight SpellBad     ctermbg=0   ctermfg=1
 
highlight Cursor guifg=white guibg=black
highlight iCursor guifg=white guibg=steelblue
set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver100-iCursor
set guicursor+=n-v-c:blinkon0
set guicursor+=i:blinkwait10

" Hybrid line number
" set number relativenumber
"
" augroup numbertoggle
"   autocmd!
"   autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
"   autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
" augroup END
"
" Make backspace work
set backspace=2

" Move a line of text using ALT+[jk] or Command+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Don't lose file history when closing buffer
set undofile
set undodir=~/.vim/undodir

" Handle ugly whitespace
set list listchars=tab:>-,trail:â€¢,precedes:<,extends:>
runtime macros/matchit.vim

" Big remaps
let mapleader = ','
let bclose_multiple = 0
:imap jj <ESC>

" Text macros
:imap bbb require 'pry'; binding.pry
:imap rrr File.write("#{subject}.data", cover_response.rating_log)
" :imap ttt trace = TracePoint.new(:raise) { |tp| binding.pry if tp.raised_exception.class == NoMethodError } trace.enable { [...] }
:imap sss RSpec.configure { \|config\| config.backtrace_exclusion_patterns << /gems/ }


" Adds Coauthored by to commits
:imap cab <C-R>=CoAuthorFunc()<CR>
function! CoAuthorFunc()
 let user_input = input('First and last name: ')
 let split_input = split(user_input)

  return "Co-authored-by: " . split_input[0] . " <" . tolower(split_input[0]) . "." . tolower(split_input[1]) . "@simplybusiness.com>"
endfunction

" First, enable status line always
set laststatus=2
if version >= 700
  au InsertEnter * hi StatusLine ctermfg=226 ctermbg=232
  au InsertLeave * hi StatusLine ctermbg=240 ctermfg=232
endif

" Make those debugger statements painfully obvious
au BufEnter *.rb syn match error "\<require 'pry'; binding.pry\>"
au BufEnter *.js syn match error contained "\<debugger\>"

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun


" Ale
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'ruby': ['rubocop'],
\}

let g:ale_fix_on_save = 1
